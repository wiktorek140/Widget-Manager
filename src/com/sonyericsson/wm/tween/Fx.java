package com.sonyericsson.wm.tween;

final class Fx
{
   public static final int KDEG = 1024;
   public static final int KPI = 512;
   public static final int Q_int = 16;
   public static final int ONE = 65536;
   public static final float ONE_F = 65536.0f;
   public static final int ONE_HALF = 32768;
   public static final int PI_int = 205887;
   private static final int[] EASE_IN_TAB;
   private static final int[] SIN_TAB;

   static
   {
      EASE_IN_TAB = new int[]{2896, 4094, 5013, 5787, 6468, 7084, 7650, 8176, 8670, 9136, 9580, 10004, 10409, 10800, 11176, 11540, 11892, 12234, 12566, 12889, 13204, 13512, 13812, 14105, 14393, 14674, 14950, 15220, 15486, 15747, 16003, 16255, 16503, 16747, 16987, 17224, 17457, 17687, 17914, 18138, 18359, 18576, 18792, 19004, 19214, 19422, 19627, 19829, 20030, 20228, 20424, 20618, 20811, 21001, 21189, 21375, 21560, 21743, 21924, 22103, 22281, 22457, 22632, 22805, 22977, 23147, 23316, 23483, 23649, 23814, 23978, 24140, 24301, 24460, 24619, 24776, 24932, 25087, 25241, 25394, 25546, 25696, 25846, 25995, 26142, 26289, 26435, 26579, 26723, 26866, 27008, 27149, 27289, 27428, 27567, 27704, 27841, 27977, 28112, 28247, 28380, 28513, 28645, 28777, 28907, 29037, 29166, 29294, 29422, 29549, 29676, 29801, 29926, 30051, 30174, 30297, 30420, 30542, 30663, 30783, 30903, 31023, 31142, 31260, 31377, 31495, 31611, 31727, 31842, 31957, 32072, 32185, 32299, 32411, 32524, 32635, 32746, 32857, 32967, 33077, 33186, 33295, 33403, 33511, 33618, 33725, 33832, 33938, 34043, 34148, 34253, 34357, 34461, 34564, 34667, 34769, 34871, 34973, 35074, 35175, 35275, 35375, 35475, 35574, 35673, 35772, 35870, 35967, 36065, 36161, 36258, 36354, 36450, 36545, 36640, 36735, 36830, 36924, 37017, 37111, 37204, 37296, 37389, 37480, 37572, 37663, 37754, 37845, 37935, 38025, 38115, 38204, 38293, 38382, 38471, 38559, 38646, 38734, 38821, 38908, 38995, 39081, 39167, 39253, 39338, 39423, 39508, 39593, 39677, 39761, 39845, 39928, 40011, 40094, 40177, 40259, 40341, 40423, 40504, 40586, 40667, 40747, 40828, 40908, 40988, 41068, 41147, 41226, 41305, 41384, 41463, 41541, 41619, 41697, 41774, 41851, 41928, 42005, 42082, 42158, 42234, 42310, 42385, 42461, 42536, 42611, 42685, 42760, 42834, 42908, 42982, 43055, 43129, 43202, 43275, 43347, 43420, 43492, 43564, 43636, 43707, 43779, 43850, 43921, 43992, 44062, 44133, 44203, 44273, 44343, 44412, 44481, 44551, 44620, 44688, 44757, 44825, 44893, 44961, 45029, 45097, 45164, 45231, 45298, 45365, 45432, 45498, 45564, 45630, 45696, 45762, 45828, 45893, 45958, 46023, 46088, 46152, 46217, 46281, 46345, 46409, 46473, 46536, 46600, 46663, 46726, 46789, 46851, 46914, 46976, 47038, 47100, 47162, 47224, 47285, 47347, 47408, 47469, 47530, 47590, 47651, 47711, 47772, 47832, 47891, 47951, 48011, 48070, 48129, 48188, 48247, 48306, 48365, 48423, 48481, 48539, 48597, 48655, 48713, 48770, 48828, 48885, 48942, 48999, 49056, 49112, 49169, 49225, 49281, 49337, 49393, 49449, 49505, 49560, 49615, 49670, 49726, 49780, 49835, 49890, 49944, 49998, 50053, 50107, 50160, 50214, 50268, 50321, 50375, 50428, 50481, 50534, 50587, 50639, 50692, 50744, 50796, 50848, 50900, 50952, 51004, 51055, 51107, 51158, 51209, 51260, 51311, 51362, 51413, 51463, 51514, 51564, 51614, 51664, 51714, 51764, 51813, 51863, 51912, 51962, 52011, 52060, 52109, 52157, 52206, 52254, 52303, 52351, 52399, 52447, 52495, 52543, 52590, 52638, 52685, 52733, 52780, 52827, 52874, 52921, 52967, 53014, 53060, 53107, 53153, 53199, 53245, 53291, 53337, 53382, 53428, 53473, 53518, 53564, 53609, 53654, 53698, 53743, 53788, 53832, 53877, 53921, 53965, 54009, 54053, 54097, 54141, 54184, 54228, 54271, 54314, 54357, 54400, 54443, 54486, 54529, 54572, 54614, 54656, 54699, 54741, 54783, 54825, 54867, 54909, 54950, 54992, 55033, 55075, 55116, 55157, 55198, 55239, 55280, 55320, 55361, 55401, 55442, 55482, 55522, 55562, 55602, 55642, 55682, 55722, 55761, 55801, 55840, 55879, 55918, 55958, 55996, 56035, 56074, 56113, 56151, 56190, 56228, 56266, 56305, 56343, 56381, 56419, 56456, 56494, 56532, 56569, 56606, 56644, 56681, 56718, 56755, 56792, 56829, 56865, 56902, 56939, 56975, 57011, 57048, 57084, 57120, 57156, 57191, 57227, 57263, 57299, 57334, 57369, 57405, 57440, 57475, 57510, 57545, 57580, 57614, 57649, 57684, 57718, 57753, 57787, 57821, 57855, 57889, 57923, 57957, 57991, 58024, 58058, 58091, 58125, 58158, 58191, 58224, 58257, 58290, 58323, 58356, 58388, 58421, 58453, 58486, 58518, 58550, 58583, 58615, 58647, 58678, 58710, 58742, 58774, 58805, 58836, 58868, 58899, 58930, 58961, 58992, 59023, 59054, 59085, 59116, 59146, 59177, 59207, 59237, 59268, 59298, 59328, 59358, 59388, 59418, 59447, 59477, 59507, 59536, 59565, 59595, 59624, 59653, 59682, 59711, 59740, 59769, 59798, 59826, 59855, 59883, 59912, 59940, 59968, 59997, 60025, 60053, 60081, 60108, 60136, 60164, 60191, 60219, 60246, 60274, 60301, 60328, 60355, 60382, 60409, 60436, 60463, 60490, 60516, 60543, 60569, 60596, 60622, 60648, 60675, 60701, 60727, 60753, 60778, 60804, 60830, 60855, 60881, 60906, 60932, 60957, 60982, 61008, 61033, 61058, 61083, 61107, 61132, 61157, 61181, 61206, 61230, 61255, 61279, 61303, 61327, 61352, 61376, 61399, 61423, 61447, 61471, 61494, 61518, 61541, 61565, 61588, 61611, 61634, 61658, 61681, 61704, 61726, 61749, 61772, 61795, 61817, 61840, 61862, 61884, 61907, 61929, 61951, 61973, 61995, 62017, 62039, 62060, 62082, 62104, 62125, 62147, 62168, 62189, 62211, 62232, 62253, 62274, 62295, 62316, 62336, 62357, 62378, 62398, 62419, 62439, 62460, 62480, 62500, 62520, 62541, 62561, 62580, 62600, 62620, 62640, 62659, 62679, 62699, 62718, 62737, 62757, 62776, 62795, 62814, 62833, 62852, 62871, 62890, 62908, 62927, 62946, 62964, 62983, 63001, 63019, 63037, 63056, 63074, 63092, 63110, 63128, 63145, 63163, 63181, 63198, 63216, 63233, 63251, 63268, 63285, 63302, 63320, 63337, 63354, 63371, 63387, 63404, 63421, 63437, 63454, 63470, 63487, 63503, 63520, 63536, 63552, 63568, 63584, 63600, 63616, 63632, 63647, 63663, 63679, 63694, 63710, 63725, 63740, 63756, 63771, 63786, 63801, 63816, 63831, 63846, 63861, 63875, 63890, 63904, 63919, 63933, 63948, 63962, 63976, 63991, 64005, 64019, 64033, 64047, 64060, 64074, 64088, 64102, 64115, 64129, 64142, 64155, 64169, 64182, 64195, 64208, 64221, 64234, 64247, 64260, 64273, 64286, 64298, 64311, 64323, 64336, 64348, 64360, 64373, 64385, 64397, 64409, 64421, 64433, 64445, 64457, 64468, 64480, 64492, 64503, 64515, 64526, 64537, 64549, 64560, 64571, 64582, 64593, 64604, 64615, 64626, 64636, 64647, 64658, 64668, 64679, 64689, 64699, 64710, 64720, 64730, 64740, 64750, 64760, 64770, 64780, 64790, 64799, 64809, 64819, 64828, 64838, 64847, 64856, 64865, 64875, 64884, 64893, 64902, 64911, 64920, 64928, 64937, 64946, 64954, 64963, 64971, 64980, 64988, 64997, 65005, 65013, 65021, 65029, 65037, 65045, 65053, 65061, 65068, 65076, 65083, 65091, 65098, 65106, 65113, 65120, 65128, 65135, 65142, 65149, 65156, 65163, 65169, 65176, 65183, 65190, 65196, 65203, 65209, 65215, 65222, 65228, 65234, 65240, 65246, 65252, 65258, 65264, 65270, 65276, 65281, 65287, 65293, 65298, 65303, 65309, 65314, 65319, 65325, 65330, 65335, 65340, 65345, 65349, 65354, 65359, 65364, 65368, 65373, 65377, 65382, 65386, 65390, 65395, 65399, 65403, 65407, 65411, 65415, 65419, 65422, 65426, 65430, 65433, 65437, 65440, 65444, 65447, 65450, 65454, 65457, 65460, 65463, 65466, 65469, 65472, 65474, 65477, 65480, 65482, 65485, 65487, 65490, 65492, 65494, 65497, 65499, 65501, 65503, 65505, 65507, 65509, 65510, 65512, 65514, 65515, 65517, 65518, 65520, 65521, 65522, 65524, 65525, 65526, 65527, 65528, 65529, 65530, 65530, 65531, 65532, 65532, 65533, 65533, 65534, 65534, 65535, 65535, 65535, 65535};
      SIN_TAB = new int[]{402, 804, 1206, 1608, 2010, 2412, 2814, 3216, 3617, 4019, 4420, 4821, 5222, 5623, 6023, 6424, 6824, 7224, 7623, 8022, 8421, 8820, 9218, 9616, 10014, 10411, 10808, 11204, 11600, 11996, 12391, 12785, 13180, 13573, 13966, 14359, 14751, 15143, 15534, 15924, 16314, 16703, 17091, 17479, 17867, 18253, 18639, 19024, 19409, 19792, 20175, 20557, 20939, 21320, 21699, 22078, 22457, 22834, 23210, 23586, 23961, 24335, 24708, 25080, 25451, 25821, 26190, 26558, 26925, 27291, 27656, 28020, 28383, 28745, 29106, 29466, 29824, 30182, 30538, 30893, 31248, 31600, 31952, 32303, 32652, 33000, 33347, 33692, 34037, 34380, 34721, 35062, 35401, 35738, 36075, 36410, 36744, 37076, 37407, 37736, 38064, 38391, 38716, 39040, 39362, 39683, 40002, 40320, 40636, 40951, 41264, 41576, 41886, 42194, 42501, 42806, 43110, 43412, 43713, 44011, 44308, 44604, 44898, 45190, 45480, 45769, 46056, 46341, 46624, 46906, 47186, 47464, 47741, 48015, 48288, 48559, 48828, 49095, 49361, 49624, 49886, 50146, 50404, 50660, 50914, 51166, 51417, 51665, 51911, 52156, 52398, 52639, 52878, 53114, 53349, 53581, 53812, 54040, 54267, 54491, 54714, 54934, 55152, 55368, 55582, 55794, 56004, 56212, 56418, 56621, 56823, 57022, 57219, 57414, 57607, 57798, 57986, 58172, 58356, 58538, 58718, 58896, 59071, 59244, 59415, 59583, 59750, 59914, 60075, 60235, 60392, 60547, 60700, 60851, 60999, 61145, 61288, 61429, 61568, 61705, 61839, 61971, 62101, 62228, 62353, 62476, 62596, 62714, 62830, 62943, 63054, 63162, 63268, 63372, 63473, 63572, 63668, 63763, 63854, 63944, 64031, 64115, 64197, 64277, 64354, 64429, 64501, 64571, 64639, 64704, 64766, 64827, 64884, 64940, 64993, 65043, 65091, 65137, 65180, 65220, 65259, 65294, 65328, 65358, 65387, 65413, 65436, 65457, 65476, 65492, 65505, 65516, 65525, 65531, 65535};
   }
   
   public static int easeIn(int vx)
   {
      if (vx <= 0)
      {
         return 0;
      }
      if (vx >= 65536)
      {
         return 65536;
      }
      return 65535 - EASE_IN_TAB[65535 - vx >> 6];
   }
   
   public static int easeOut(int vx)
   {
      if (vx <= 0)
      {
         return 0;
      }
      if (vx >= 65536)
      {
         return 65536;
      }
      return EASE_IN_TAB[vx >> 6];
   }
   
   public static int ksin(int a)
   {
      int result;
      boolean sign = false;
      int angle = a & 0x3ff;
      if (angle > 512)
      {
         sign = !sign;
         if (angle > 768)
         {
            angle = 1024 - angle;
         }
         else
         {
            angle -= 512;
         }
      }
      else if (angle > 256)
      {
         angle = 512 - angle;
      }
      if (angle != 256)
      {
         result = 0xffff & SIN_TAB[angle];
      }
      else
      {
         result = 65536;
      }
      if (sign)
      {
         return -result;
      }
      return result;
   }
   
   public static int mul(int m, int n)
   {
      return (int) ((long) m * (long) n >> 16);
   }
   
   private Fx()
   {
   }
   
}